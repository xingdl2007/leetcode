10.3 one use index, one use key

10.4 ignore

10.6 key : vector<int>::iterator , yes
     key : list<int>::iterator, yes
     key : pair<int,string> , no

10.7 key_type: const int
     mapped_type: vector<int>
     value_type: pair<const int, vector<int> >

10.8 it->second = second;

10.10 map<int,int>m;
      map[0] = 1; then the result will be 'map[0] = 1', it will insert

      vector<int> v;
      v[0] = 1; error, because v is empty
     
10.11 the index is the key, only the type has 'stick weak ordering' can be the
      index or the key; the index operator will return the value type.

10.13 parameter: pair< string,vector<int> >
      return: pair< map<string, vector<int> >::iterator,bool>

10.14 count: return 0 or 1
      find: return a iterator, not exist just return the end()

10.15 count: just want to know if a element exists in the map
      find: can then operate the element if it exists

10.16 map< string,vector<int> >::iterator ret;

10.17 a bad idea if not use the find()

10.18 map<string, vector<string> > name_map;

10.19 map<string, vector<pair<string, string> > > name_birth_map;
